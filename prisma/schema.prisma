generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id
  lernChats   LernChat[]
  solveChat   SolveChat[]
  userStats   UserStats?  @relation(fields: [userStatsId], references: [id])
  userStatsId String?     @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model UserStats {
  id           String   @id @default(uuid())
  user         User?    @relation()
  userId       String   @unique
  solved       Int      @default(0)
  learned      String[] @default([])
  lernTime     Int      @default(0)
  correctness  Int      @default(0)
  // {emoji: String; text: String; time: DateTime}[]
  lastActivity Json[]   @default([])
  // {title: String; description: String; emoji: String}[]
  achievements Json[]   @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model LernChat {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  category  String
  messages  Message[]
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SolveChat {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id          String     @id @default(uuid())
  role        String
  content     String
  chat        LernChat?  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  solveChat   SolveChat? @relation(fields: [solveChatId], references: [id], onDelete: Cascade)
  chatId      String?
  solveChatId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
